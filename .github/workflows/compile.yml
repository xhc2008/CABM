name: Build Executables with Nuitka (Multi-Arch)

# 添加 schedule 触发器，这里设置为每周一 UTC 时间早上 7 点执行（对应北京时间 15:00）
on:
  workflow_dispatch:
    inputs:
      version:
        description: '构建版本号 (e.g. v1.0.0)'
        required: true
        default: 'v0.0.0'
      release_name:
        description: '构建名称 (optional)'
        required: true
        default: 'Multi-Arch 编译版本'
      release_text:
        description: '构建描述 (optional)'
        required: true
        default: '支持 Windows/Linux/macOS 多架构'


jobs:
  # ==================== WINDOWS JOBS ====================
  build-windows-x64-full:
    runs-on: windows-latest
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python (x64)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: 🧹 Clean excluded files (.nobuild)
        shell: pwsh
        run: |
          $excludedFiles = @()
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed: $file"
            }
          }
          Get-ChildItem -Directory | Where-Object { (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 } | Remove-Item -Recurse -Force

      - name: 📦 Install dependencies (Full)
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install rank_bm25 jieba tqdm
          pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: 🖥️ Build Windows executable
        shell: pwsh
        run: |
          $jiebaDict = python -c "import jieba; import os; print(os.path.join(os.path.dirname(jieba.__file__), 'dict.txt'))"
          python -m nuitka `
            --assume-yes-for-downloads `
            --standalone `
            --mingw64 `
            --enable-plugin=pylint-warnings `
            --include-package=services `
            --include-package=utils `
            --include-package=utils.RAG `
            --include-package=utils.RAG.Multi_Recall `
            --include-package=utils.RAG.Reranker `
            --include-package=rtoml `
            --include-data-file="$jiebaDict=jieba/dict.txt" `
            --output-dir=dist start.py

          if (Test-Path "characters") { Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force }
          if (Test-Path "data")       { Copy-Item -Path "data"       -Destination "dist\start.dist\data"       -Recurse -Force }
          if (Test-Path "static")     { Copy-Item -Path "static"     -Destination "dist\start.dist\static"     -Recurse -Force }
          if (Test-Path "templates")  { Copy-Item -Path "templates"  -Destination "dist\start.dist\templates"  -Recurse -Force }
          if (Test-Path "config")     { Copy-Item -Path "config"     -Destination "dist\start.dist\config"     -Recurse -Force }

          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: 🗑️ Cleanup artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package Windows release
        shell: pwsh
        run: |
          Get-ChildItem -Path "app" | ForEach-Object {
            $dest = Join-Path "." $_.Name
            if (Test-Path $dest) { Remove-Item -Path $dest -Recurse -Force }
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          Remove-Item -Path "app" -Recurse -Force
          if (Test-Path "start.exe") { Move-Item -Path "start.exe" -Destination "app.exe" -Force }
          Compress-Archive -Path * -DestinationPath "Windows-x64-Full-Release-${{ inputs.version }}.zip" -Force

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x64-Full-Release-${{ inputs.version }}
          path: Windows-x64-Full-Release-${{ inputs.version }}.zip
          overwrite: true

  build-windows-x64-lite:
    runs-on: windows-latest
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python (x64)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: 🧹 Clean excluded files (.nobuild)
        shell: pwsh
        run: |
          $excludedFiles = @()
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed: $file"
            }
          }
          Get-ChildItem -Directory | Where-Object { (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 } | Remove-Item -Recurse -Force

      - name: 📦 Install dependencies (Lite)
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: 🖥️ Build Windows executable
        shell: pwsh
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --mingw64 --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          if (Test-Path "characters") { Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force }
          if (Test-Path "data")       { Copy-Item -Path "data"       -Destination "dist\start.dist\data"       -Recurse -Force }
          if (Test-Path "static")     { Copy-Item -Path "static"     -Destination "dist\start.dist\static"     -Recurse -Force }
          if (Test-Path "templates")  { Copy-Item -Path "templates"  -Destination "dist\start.dist\templates"  -Recurse -Force }
          if (Test-Path "config")     { Copy-Item -Path "config"     -Destination "dist\start.dist\config"     -Recurse -Force }

          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: 🗑️ Cleanup artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package Windows release
        shell: pwsh
        run: |
          Get-ChildItem -Path "app" | ForEach-Object {
            $dest = Join-Path "." $_.Name
            if (Test-Path $dest) { Remove-Item -Path $dest -Recurse -Force }
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          Remove-Item -Path "app" -Recurse -Force
          if (Test-Path "start.exe") { Move-Item -Path "start.exe" -Destination "app.exe" -Force }
          Compress-Archive -Path * -DestinationPath "Windows-x64-Lite-Release-${{ inputs.version }}.zip" -Force

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x64-Lite-Release-${{ inputs.version }}
          path: Windows-x64-Lite-Release-${{ inputs.version }}.zip
          overwrite: true

  build-windows-x86-lite:
    runs-on: windows-2022
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python (x86)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x86'

      - name: 🧹 Clean excluded files (.nobuild)
        shell: pwsh
        run: |
          $excludedFiles = @()
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed: $file"
            }
          }
          Get-ChildItem -Directory | Where-Object { (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 } | Remove-Item -Recurse -Force

      - name: 📦 Install dependencies (Lite)
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: 🖥️ Build Windows executable
        shell: pwsh
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --mingw64 --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          if (Test-Path "characters") { Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force }
          if (Test-Path "data")       { Copy-Item -Path "data"       -Destination "dist\start.dist\data"       -Recurse -Force }
          if (Test-Path "static")     { Copy-Item -Path "static"     -Destination "dist\start.dist\static"     -Recurse -Force }
          if (Test-Path "templates")  { Copy-Item -Path "templates"  -Destination "dist\start.dist\templates"  -Recurse -Force }
          if (Test-Path "config")     { Copy-Item -Path "config"     -Destination "dist\start.dist\config"     -Recurse -Force }

          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: 🗑️ Cleanup artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package Windows release
        shell: pwsh
        run: |
          Get-ChildItem -Path "app" | ForEach-Object {
            $dest = Join-Path "." $_.Name
            if (Test-Path $dest) { Remove-Item -Path $dest -Recurse -Force }
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          Remove-Item -Path "app" -Recurse -Force
          if (Test-Path "start.exe") { Move-Item -Path "start.exe" -Destination "app.exe" -Force }
          Compress-Archive -Path * -DestinationPath "Windows-x86-Lite-Release-${{ inputs.version }}.zip" -Force

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x86-Lite-Release-${{ inputs.version }}
          path: Windows-x86-Lite-Release-${{ inputs.version }}.zip
          overwrite: true

  # ==================== LINUX JOBS ====================
  build-linux-x64-full:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🧹 Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: 📦 Install dependencies (Full)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install rank_bm25 jieba tqdm
          pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: 🐧 Build Linux executable
        run: |
          JIEBA_DICT=$(python -c "import jieba; import os; print(os.path.join(os.path.dirname(jieba.__file__), 'dict.txt'))")
          python -m nuitka \
            --assume-yes-for-downloads \
            --standalone \
            --enable-plugin=pylint-warnings \
            --include-package=services \
            --include-package=utils \
            --include-package=utils.RAG \
            --include-package=utils.RAG.Multi_Recall \
            --include-package=utils.RAG.Reranker \
            --include-package=rtoml \
            --include-data-file="$JIEBA_DICT=jieba/dict.txt" \
            --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: 🗑️ Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: 📦 Package Linux release
        run: |
          rm -rf characters data static templates config
          mv app/* ./
          rmdir app
          [ -f start ] && mv start app
          zip -r Linux-x64-Full-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-x64-Full-Release-${{ inputs.version }}
          path: Linux-x64-Full-Release-${{ inputs.version }}.zip
          overwrite: true

  build-linux-x64-lite:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🧹 Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: 📦 Install dependencies (Lite)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: 🐧 Build Linux executable
        run: |
          python -m nuitka \
            --assume-yes-for-downloads \
            --standalone \
            --enable-plugin=pylint-warnings \
            --include-package=services \
            --include-package=utils \
            --include-package=utils.RAG \
            --include-package=utils.RAG.Multi_Recall \
            --include-package=utils.RAG.Reranker \
            --include-package=rtoml \
            --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: 🗑️ Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: 📦 Package Linux release
        run: |
          rm -rf characters data static templates config
          mv app/* ./
          rmdir app
          [ -f start ] && mv start app
          zip -r Linux-x64-Lite-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-x64-Lite-Release-${{ inputs.version }}
          path: Linux-x64-Lite-Release-${{ inputs.version }}.zip
          overwrite: true

  # ==================== MACOS JOBS ====================
  build-macos-x64-full:
    runs-on: macos-13
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🧹 Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: 📦 Install dependencies (Full)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install rank_bm25 jieba tqdm
          pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: 🍏 Build macOS executable
        run: |
          JIEBA_DICT=$(python -c "import jieba; import os; print(os.path.join(os.path.dirname(jieba.__file__), 'dict.txt'))")
          python -m nuitka \
            --assume-yes-for-downloads \
            --standalone \
            --enable-plugin=pylint-warnings \
            --include-package=services \
            --include-package=utils \
            --include-package=utils.RAG \
            --include-package=utils.RAG.Multi_Recall \
            --include-package=utils.RAG.Reranker \
            --include-package=rtoml \
            --include-data-file="$JIEBA_DICT=jieba/dict.txt" \
            --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: 🗑️ Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: 📦 Package macOS release
        run: |
          rm -rf characters data static templates config
          mv app/* ./
          rmdir app
          [ -f start ] && mv start app
          zip -r macOS-x64-Full-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-x64-Full-Release-${{ inputs.version }}
          path: macOS-x64-Full-Release-${{ inputs.version }}.zip
          overwrite: true

  build-macos-x64-lite:
    runs-on: macos-13
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🧹 Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: 📦 Install dependencies (Lite)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: 🍏 Build macOS executable
        run: |
          python -m nuitka \
            --assume-yes-for-downloads \
            --standalone \
            --enable-plugin=pylint-warnings \
            --include-package=services \
            --include-package=utils \
            --include-package=utils.RAG \
            --include-package=utils.RAG.Multi_Recall \
            --include-package=utils.RAG.Reranker \
            --include-package=rtoml \
            --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: 🗑️ Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: 📦 Package macOS release
        run: |
          rm -rf characters data static templates config
          mv app/* ./
          rmdir app
          [ -f start ] && mv start app
          zip -r macOS-x64-Lite-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-x64-Lite-Release-${{ inputs.version }}
          path: macOS-x64-Lite-Release-${{ inputs.version }}.zip
          overwrite: true

  build-macos-arm64-full:
    runs-on: macos-latest
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🧹 Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: 📦 Install dependencies (Full)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install rank_bm25 jieba tqdm
          pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: 🍏 Build macOS executable
        run: |
          JIEBA_DICT=$(python -c "import jieba; import os; print(os.path.join(os.path.dirname(jieba.__file__), 'dict.txt'))")
          python -m nuitka \
            --assume-yes-for-downloads \
            --standalone \
            --enable-plugin=pylint-warnings \
            --include-package=services \
            --include-package=utils \
            --include-package=utils.RAG \
            --include-package=utils.RAG.Multi_Recall \
            --include-package=utils.RAG.Reranker \
            --include-package=rtoml \
            --include-data-file="$JIEBA_DICT=jieba/dict.txt" \
            --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: 🗑️ Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: 📦 Package macOS release
        run: |
          rm -rf characters data static templates config
          mv app/* ./
          rmdir app
          [ -f start ] && mv start app
          zip -r macOS-ARM64-Full-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-ARM64-Full-Release-${{ inputs.version }}
          path: macOS-ARM64-Full-Release-${{ inputs.version }}.zip
          overwrite: true

  build-macos-arm64-lite:
    runs-on: macos-latest
    timeout-minutes: 180
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 🧹 Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: 📦 Install dependencies (Lite)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: 🍏 Build macOS executable
        run: |
          python -m nuitka \
            --assume-yes-for-downloads \
            --standalone \
            --enable-plugin=pylint-warnings \
            --include-package=services \
            --include-package=utils \
            --include-package=utils.RAG \
            --include-package=utils.RAG.Multi_Recall \
            --include-package=utils.RAG.Reranker \
            --include-package=rtoml \
            --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: 🗑️ Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: 📦 Package macOS release
        run: |
          rm -rf characters data static templates config
          mv app/* ./
          rmdir app
          [ -f start ] && mv start app
          zip -r macOS-ARM64-Lite-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-ARM64-Lite-Release-${{ inputs.version }}
          path: macOS-ARM64-Lite-Release-${{ inputs.version }}.zip
          overwrite: true

  # ==================== PUBLISH ALL ====================
  publish-release:
    if: github.event_name == 'workflow_dispatch'
    needs:
      - build-windows-x64-full
      - build-windows-x64-lite
      - build-windows-x86-lite
      - build-linux-x64-full
      - build-linux-x64-lite
      - build-macos-x64-full
      - build-macos-x64-lite
      - build-macos-arm64-full
      - build-macos-arm64-lite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 🗑️ Delete existing release/tag if exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete "${{ inputs.version }}" --yes 2>/dev/null || echo "No existing release to delete."
          git tag -d "${{ inputs.version }}" 2>/dev/null || echo "No local tag to delete."
          git push --delete origin "${{ inputs.version }}" 2>/dev/null || echo "No remote tag to delete."

      - name: 🚀 Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          find . -type f -name "*.zip" -exec mv {} . \; 2>/dev/null || true
          find . -type d -empty -delete

          gh release create "${{ inputs.version }}" \
            --title "${{ inputs.release_name || inputs.version }}" \
            --notes "${{ inputs.release_text }}" \
            Windows-x64-Full-Release-${{ inputs.version }}.zip \
            Windows-x64-Lite-Release-${{ inputs.version }}.zip \
            Windows-x86-Lite-Release-${{ inputs.version }}.zip \
            Linux-x64-Full-Release-${{ inputs.version }}.zip \
            Linux-x64-Lite-Release-${{ inputs.version }}.zip \
            macOS-x64-Full-Release-${{ inputs.version }}.zip \
            macOS-x64-Lite-Release-${{ inputs.version }}.zip \
            macOS-ARM64-Full-Release-${{ inputs.version }}.zip \
            macOS-ARM64-Lite-Release-${{ inputs.version }}.zip

  # ==================== SCHEDULED BUILD JOB ====================
  scheduled-build:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      new_version: ${{ steps.generate_version.outputs.new_version }}
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Read current version from /api/tag
        id: read_version
        run: |
          if [ -f /api/tag ]; then
            CURRENT_VERSION=$(cat /api/tag | xargs)
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Found current version: $CURRENT_VERSION"
          else
            echo "Error: /api/tag file not found in repository root."
            exit 1
          fi

      - name: 🔢 Generate new version
        id: generate_version
        run: |
          CURRENT="${{ steps.read_version.outputs.current_version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          if [[ $PATCH =~ ^([0-9]+)([0-9]*)$ ]]; then
              BASE_NUM="${BASH_REMATCH[1]}"
              SUFFIX_NUM="${BASH_REMATCH[2]:-0}"
          else
              BASE_NUM="$PATCH"
              SUFFIX_NUM="0"
          fi
          NEW_VERSION="${MAJOR}.${MINOR}.${BASE_NUM}${SUFFIX_NUM}1"
          echo "Generated new version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Update /api/tag file locally
        run: |
          NEW_VERSION="${{ steps.generate_version.outputs.new_version }}"
          echo "$NEW_VERSION" > /api/tag
          echo "Updated /api/tag file locally with: $NEW_VERSION"

      - name: 🚀 Trigger workflow with new version (Full Release)
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Build Executables with Nuitka (Multi-Arch)
          inputs: '{"version": "${{ steps.generate_version.outputs.new_version }}", "release_name": "Scheduled Build ${{ steps.generate_version.outputs.new_version }}", "release_text": "Automated build triggered by schedule. Version based on /api/tag."}'
          ref: ${{ github.ref }}

  # ==================== SCHEDULED PUBLISH JOB ====================
  publish-scheduled-release:
    needs: scheduled-build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule'
    steps:
      - name: 🛒 Checkout code (for tag update)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download all artifacts from scheduled run
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 🗑️ Delete existing release/tag if exists (for scheduled version)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.scheduled-build.outputs.new_version }}"
          gh release delete "$NEW_VERSION" --yes 2>/dev/null || echo "No existing release $NEW_VERSION to delete."
          git tag -d "$NEW_VERSION" 2>/dev/null || echo "No local tag $NEW_VERSION to delete."
          git push --delete origin "$NEW_VERSION" 2>/dev/null || echo "No remote tag $NEW_VERSION to delete."

      - name: 🚀 Create Release and Upload Assets (for scheduled version)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.scheduled-build.outputs.new_version }}"
          cd artifacts
          find . -type f -name "*.zip" -exec mv {} . \; 2>/dev/null || true
          find . -type d -empty -delete

          gh release create "$NEW_VERSION" \
            --title "Scheduled Build $NEW_VERSION" \
            --notes "Automated build triggered by schedule. Version based on /api/tag." \
            Windows-x64-Full-Release-$NEW_VERSION.zip \
            Windows-x64-Lite-Release-$NEW_VERSION.zip \
            Windows-x86-Lite-Release-$NEW_VERSION.zip \
            Linux-x64-Full-Release-$NEW_VERSION.zip \
            Linux-x64-Lite-Release-$NEW_VERSION.zip \
            macOS-x64-Full-Release-$NEW_VERSION.zip \
            macOS-x64-Lite-Release-$NEW_VERSION.zip \
            macOS-ARM64-Full-Release-$NEW_VERSION.zip \
            macOS-ARM64-Lite-Release-$NEW_VERSION.zip

      - name: 📝 Commit and push updated /api/tag file
        run: |
          NEW_VERSION="${{ needs.scheduled-build.outputs.new_version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add /api/tag
          git commit -m "Update /api/tag to $NEW_VERSION [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}
