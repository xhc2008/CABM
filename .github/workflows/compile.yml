name: Build Executables with Nuitka (Multi-Arch)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'ÊûÑÂª∫ÁâàÊú¨Âè∑ (e.g. v1.0.0)'
        required: true
        default: 'v0.0.0'
      release_name:
        description: 'ÊûÑÂª∫ÂêçÁß∞ (optional)'
        required: true
        default: 'Multi-Arch ÁºñËØëÁâàÊú¨'
      release_text:
        description: 'ÊûÑÂª∫ÊèèËø∞ (optional)'
        required: true
        default: 'ÊîØÊåÅ Windows/Linux/macOS Â§öÊû∂ÊûÑ'

permissions:
  contents: write

jobs:

  # ==================== WINDOWS x64 ====================
  build-windows-x64:
    runs-on: windows-latest
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python (x64)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: üßπ Clean excluded files (.nobuild)
        shell: pwsh
        run: |
          $excludedFiles = @()
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed: $file"
            }
          }
          Get-ChildItem -Directory | Where-Object { (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 } | Remove-Item -Recurse -Force

      - name: üì¶ Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üñ•Ô∏è Build Windows x64 executable
        shell: pwsh
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --mingw64 --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          if (Test-Path "characters") { Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force }
          if (Test-Path "data")       { Copy-Item -Path "data"       -Destination "dist\start.dist\data"       -Recurse -Force }
          if (Test-Path "static")     { Copy-Item -Path "static"     -Destination "dist\start.dist\static"     -Recurse -Force }
          if (Test-Path "templates")  { Copy-Item -Path "templates"  -Destination "dist\start.dist\templates"  -Recurse -Force }
          if (Test-Path "config")     { Copy-Item -Path "config"     -Destination "dist\start.dist\config"     -Recurse -Force }

          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: üóëÔ∏è Cleanup artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: üì¶ Package Windows x64 release
        shell: pwsh
        run: |
          Get-ChildItem -Path "app" | ForEach-Object {
            $dest = Join-Path "." $_.Name
            if (Test-Path $dest) { Remove-Item -Path $dest -Recurse -Force }
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          Remove-Item -Path "app" -Recurse -Force
          if (Test-Path "start.exe") { Move-Item -Path "start.exe" -Destination "app.exe" -Force }
          Compress-Archive -Path * -DestinationPath "Windows-x64-Release-${{ inputs.version }}.zip" -Force

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x64-Release-${{ inputs.version }}
          path: Windows-x64-Release-${{ inputs.version }}.zip

  # ==================== WINDOWS x86 (32-bit) ====================
  build-windows-x86:
    runs-on: windows-2022
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python (x86)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x86'

      - name: üßπ Clean excluded files (.nobuild)
        shell: pwsh
        run: |
          $excludedFiles = @()
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed: $file"
            }
          }
          Get-ChildItem -Directory | Where-Object { (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 } | Remove-Item -Recurse -Force

      - name: üì¶ Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üñ•Ô∏è Build Windows x86 executable
        shell: pwsh
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --mingw64 --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          if (Test-Path "characters") { Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force }
          if (Test-Path "data")       { Copy-Item -Path "data"       -Destination "dist\start.dist\data"       -Recurse -Force }
          if (Test-Path "static")     { Copy-Item -Path "static"     -Destination "dist\start.dist\static"     -Recurse -Force }
          if (Test-Path "templates")  { Copy-Item -Path "templates"  -Destination "dist\start.dist\templates"  -Recurse -Force }
          if (Test-Path "config")     { Copy-Item -Path "config"     -Destination "dist\start.dist\config"     -Recurse -Force }

          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: üóëÔ∏è Cleanup artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: üì¶ Package Windows x86 release
        shell: pwsh
        run: |
          Get-ChildItem -Path "app" | ForEach-Object {
            $dest = Join-Path "." $_.Name
            if (Test-Path $dest) { Remove-Item -Path $dest -Recurse -Force }
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          Remove-Item -Path "app" -Recurse -Force
          if (Test-Path "start.exe") { Move-Item -Path "start.exe" -Destination "app.exe" -Force }
          Compress-Archive -Path * -DestinationPath "Windows-x86-Release-${{ inputs.version }}.zip" -Force

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x86-Release-${{ inputs.version }}
          path: Windows-x86-Release-${{ inputs.version }}.zip

  # ==================== WINDOWS ARM64 ====================
  build-windows-arm64:
    runs-on: windows-latest-arm64
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python (ARM64)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'ARM64'

      - name: üßπ Clean excluded files (.nobuild)
        shell: pwsh
        run: |
          $excludedFiles = @()
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed: $file"
            }
          }
          Get-ChildItem -Directory | Where-Object { (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 } | Remove-Item -Recurse -Force

      - name: üì¶ Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üñ•Ô∏è Build Windows ARM64 executable
        shell: pwsh
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --mingw64 --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          if (Test-Path "characters") { Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force }
          if (Test-Path "data")       { Copy-Item -Path "data"       -Destination "dist\start.dist\data"       -Recurse -Force }
          if (Test-Path "static")     { Copy-Item -Path "static"     -Destination "dist\start.dist\static"     -Recurse -Force }
          if (Test-Path "templates")  { Copy-Item -Path "templates"  -Destination "dist\start.dist\templates"  -Recurse -Force }
          if (Test-Path "config")     { Copy-Item -Path "config"     -Destination "dist\start.dist\config"     -Recurse -Force }

          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: üóëÔ∏è Cleanup artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: üì¶ Package Windows ARM64 release
        shell: pwsh
        run: |
          Get-ChildItem -Path "app" | ForEach-Object {
            $dest = Join-Path "." $_.Name
            if (Test-Path $dest) { Remove-Item -Path $dest -Recurse -Force }
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          Remove-Item -Path "app" -Recurse -Force
          if (Test-Path "start.exe") { Move-Item -Path "start.exe" -Destination "app.exe" -Force }
          Compress-Archive -Path * -DestinationPath "Windows-ARM64-Release-${{ inputs.version }}.zip" -Force

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-ARM64-Release-${{ inputs.version }}
          path: Windows-ARM64-Release-${{ inputs.version }}.zip

  # ==================== LINUX x64 ====================
  build-linux-x64:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üßπ Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üêß Build Linux x64 executable
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: üóëÔ∏è Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: üì¶ Package Linux x64 release
        run: |
          # Âà†Èô§ÂèØËÉΩÂÜ≤Á™ÅÁöÑÁõÆÂΩï
          rm -rf characters data static templates config

          # ÁßªÂä® app ÂÜÖÂÆπÂà∞Ê†πÁõÆÂΩï
          mv app/* ./
          rmdir app

          # ÈáçÂëΩÂêçÂèØÊâßË°åÊñá‰ª∂ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
          [ -f start ] && mv start app

          # ÂéãÁº©‰∏∫ zip
          zip -r Linux-x64-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-x64-Release-${{ inputs.version }}
          path: Linux-x64-Release-${{ inputs.version }}.zip

  # ==================== LINUX ARM64 ====================
  build-linux-arm64:
    runs-on: ubuntu-latest-arm64
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üßπ Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üêß Build Linux ARM64 executable
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: üóëÔ∏è Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: üì¶ Package Linux ARM64 release
        run: |
          # Âà†Èô§ÂèØËÉΩÂÜ≤Á™ÅÁöÑÁõÆÂΩï
          rm -rf characters data static templates config

          # ÁßªÂä® app ÂÜÖÂÆπÂà∞Ê†πÁõÆÂΩï
          mv app/* ./
          rmdir app

          # ÈáçÂëΩÂêçÂèØÊâßË°åÊñá‰ª∂ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
          [ -f start ] && mv start app

          # ÂéãÁº©‰∏∫ zip
          zip -r Linux-ARM64-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-ARM64-Release-${{ inputs.version }}
          path: Linux-ARM64-Release-${{ inputs.version }}.zip

  # ==================== macOS x64 (Intel) ====================
  build-macos-x64:
    runs-on: macos-13
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üßπ Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üçè Build macOS x64 executable
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: üóëÔ∏è Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: üì¶ Package macOS x64 release
        run: |
          # Âà†Èô§ÂèØËÉΩÂÜ≤Á™ÅÁöÑÁõÆÂΩï
          rm -rf characters data static templates config

          # ÁßªÂä® app ÂÜÖÂÆπÂà∞Ê†πÁõÆÂΩï
          mv app/* ./
          rmdir app

          # ÈáçÂëΩÂêçÂèØÊâßË°åÊñá‰ª∂ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
          [ -f start ] && mv start app

          # ÂéãÁº©‰∏∫ zip
          zip -r macOS-x64-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-x64-Release-${{ inputs.version }}
          path: macOS-x64-Release-${{ inputs.version }}.zip

  # ==================== macOS ARM64 (Apple Silicon) ====================
  build-macos-arm64:
    runs-on: macos-latest
    timeout-minutes: 120
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üßπ Clean excluded files (.nobuild)
        run: |
          if [ -f .nobuild ]; then
            while IFS= read -r line; do
              [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
              if [ -e "$line" ]; then
                rm -rf "$line"
                echo "Removed: $line"
              fi
            done < .nobuild
          fi
          find . -type d -empty -delete

      - name: üì¶ Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: üçè Build macOS ARM64 executable
        run: |
          python -m nuitka --assume-yes-for-downloads --standalone --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --include-package=rtoml --output-dir=dist start.py

          mkdir -p dist/start.dist/characters dist/start.dist/data dist/start.dist/static dist/start.dist/templates dist/start.dist/config
          [ -d characters ] && cp -r characters dist/start.dist/
          [ -d data ]       && cp -r data       dist/start.dist/
          [ -d static ]     && cp -r static     dist/start.dist/
          [ -d templates ]  && cp -r templates  dist/start.dist/
          [ -d config ]     && cp -r config     dist/start.dist/

          mv dist/start.dist app

      - name: üóëÔ∏è Cleanup artifacts
        run: |
          rm -rf dist start.build *.spec

      - name: üì¶ Package macOS ARM64 release
        run: |
          # Âà†Èô§ÂèØËÉΩÂÜ≤Á™ÅÁöÑÁõÆÂΩï
          rm -rf characters data static templates config

          # ÁßªÂä® app ÂÜÖÂÆπÂà∞Ê†πÁõÆÂΩï
          mv app/* ./
          rmdir app

          # ÈáçÂëΩÂêçÂèØÊâßË°åÊñá‰ª∂ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
          [ -f start ] && mv start app

          # ÂéãÁº©‰∏∫ zip
          zip -r macOS-ARM64-Release-${{ inputs.version }}.zip . -x "*.git*" -x "*.zip"

      - name: üì§ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-ARM64-Release-${{ inputs.version }}
          path: macOS-ARM64-Release-${{ inputs.version }}.zip

  # ==================== PUBLISH ALL ====================
  publish-release:
    needs:
      - build-windows-x64
      - build-windows-x86
      - build-windows-arm64
      - build-linux-x64
      - build-linux-arm64
      - build-macos-x64
      - build-macos-arm64
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: üóëÔ∏è Delete existing release/tag if exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete "${{ inputs.version }}" --yes 2>/dev/null || echo "No existing release to delete."
          git tag -d "${{ inputs.version }}" 2>/dev/null || echo "No local tag to delete."
          git push --delete origin "${{ inputs.version }}" 2>/dev/null || echo "No remote tag to delete."

      - name: üöÄ Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          # Flatten all zip files to current dir
          find . -type f -name "*.zip" -exec mv {} . \; 2>/dev/null || true
          # Remove any left empty dirs
          find . -type d -empty -delete

          gh release create "${{ inputs.version }}" \
            --title "${{ inputs.release_name || inputs.version }}" \
            --notes "${{ inputs.release_text }}" \
            Windows-x64-Release-${{ inputs.version }}.zip \
            Windows-x86-Release-${{ inputs.version }}.zip \
            Windows-ARM64-Release-${{ inputs.version }}.zip \
            Linux-x64-Release-${{ inputs.version }}.zip \
            Linux-ARM64-Release-${{ inputs.version }}.zip \
            macOS-x64-Release-${{ inputs.version }}.zip \
            macOS-ARM64-Release-${{ inputs.version }}.zip
